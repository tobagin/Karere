name: Karere CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint
    
    - name: Run backend unit tests
      working-directory: ./backend
      run: npm run test:unit
    
    - name: Run backend integration tests
      working-directory: ./backend
      run: npm run test:integration
    
    - name: Generate test coverage
      working-directory: ./backend
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-gi \
          python3-gi-cairo \
          gir1.2-gtk-4.0 \
          gir1.2-adw-1 \
          xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
    
    - name: Run frontend unit tests
      run: |
        cd tests/frontend
        python -m pytest test_websocket_client.py -v
        python -m pytest test_window.py -v
    
    - name: Generate frontend coverage
      run: |
        cd tests/frontend
        python -m pytest --cov=../../frontend/karere --cov-report=xml --cov-report=html
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/frontend/coverage.xml
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  build-tests:
    name: Build System Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          meson \
          ninja-build \
          python3-gi \
          python3-gi-cairo \
          gir1.2-gtk-4.0 \
          gir1.2-adw-1 \
          gettext
    
    - name: Setup build directory
      run: meson setup builddir
    
    - name: Compile project
      run: meson compile -C builddir
    
    - name: Run meson tests
      run: meson test -C builddir --verbose
    
    - name: Check installation
      run: |
        DESTDIR=/tmp/install meson install -C builddir
        ls -la /tmp/install

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      # We could add a test database service here if needed
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: karere_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-gi \
          python3-gi-cairo \
          gir1.2-gtk-4.0 \
          gir1.2-adw-1 \
          meson \
          ninja-build \
          xvfb
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install Python test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio websocket-client
    
    - name: Build frontend
      run: |
        meson setup builddir
        meson compile -C builddir
    
    - name: Run integration tests
      run: |
        cd tests/integration
        python -m pytest -v
      env:
        DATABASE_URL: postgresql://postgres:test@localhost:5432/karere_test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run npm audit
      working-directory: ./backend
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run ESLint with detailed output
      working-directory: ./backend
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true
    
    - name: Upload ESLint results
      uses: actions/upload-artifact@v3
      with:
        name: eslint-report
        path: backend/eslint-report.json

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run performance tests
      working-directory: ./backend
      run: |
        # Add performance test commands here
        echo "Performance tests would run here"
        # npm run test:performance

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, build-tests, integration-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.build-tests.result == 'success' && needs.integration-tests.result == 'success' }}
      run: echo "All tests passed! ✅"
    
    - name: Notify failure
      if: ${{ needs.backend-tests.result == 'failure' || needs.frontend-tests.result == 'failure' || needs.build-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
      run: echo "Some tests failed! ❌"
